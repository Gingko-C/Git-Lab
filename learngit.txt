在git bash 中执行下列命令！

1.创建一个版本库 
	$ mkdir learngit//新建目录 learngit
	$ cd learngit//转到目录 learngit
	$ pwd//显示当前目录
	$ git init//在当前目录创建版本库，完成后出现.git

2.管理库
	$ git add filename//添加文件
	$ git commit -m"what has been changed"//提交并注明改动
	$ git status//掌握仓库的当前状态
	$ git diff//查看改动
	$ cat filename//查看文件内容
	$ git log//查看历史版本改动 后面加上 --pretty=oneline 可单行显示 省去用户名
	$ git reset --hard HEAD^//回到上个版本  HEAD可以替换为：HEAD^^...HEAD~100 或者是版本号（前几位即可）
	$ git relog//查看历史命令 得到的历史命令操作号 可以用来reset到该行命令执行后的版本。
	$ git diff HEAD -- readme.txt//可以查看工作区和版本库里面最新版本的区别
	$ git checkout -- readme.txt//让这个文件回到最近一次git commit或git add时的状态
	$ git reset HEAD filename//可以把暂存区的修改撤销掉（unstage），版本库中最新的版本重新放回工作区
	$ rm test.txt//删除 test.txt
	$ git rm test.txt//从版本库中删除该文件

3.远程库	
	$ git remote add origin git@server-name:path/repo-name.git//要关联一个远程库，使用该命令
	$ git push -u origin master//关联后，使用该命令第一次推送master分支的所有内容；
	$ git push origin master//此后，每次本地提交后，只要有必要，就可以使用命令推送最新修改；
	$ git clone git@github.com:michaelliao/gitskills.git//克隆远程库

4.分支管理
	$ git checkout -b dev//git checkout命令加上-b参数表示创建并切换，相当于以下两条命令
	$ git branch dev//创建
	$ git checkout dev//切换到该分支
	$ git branch//查看分支 当前分支之前有个*
	$ git merge dev//合并指定分支到当前分支
	$ git branch -d <name>//删除分支
	$ git log --graph --pretty=oneline --abbrev-commit//查看分支合并状况 **使用‘Q’退出查询模式
	$ git merge --no-ff -m "merge with no-ff" dev//合并dev分支，请注意--no-ff参数，表示禁用Fast forward
	$ git stash//把当前工作现场“储藏”起来 (临时修改->工作现场->本地仓库->远程仓库)
	$ git stash apply//恢复，但是恢复后，stash内容并不删除
	$ git stash drop//删除stash内容
	$ git stash pop//恢复的同时把stash内容也删了(常用)
	$ git stash apply stash@{0}//你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash
	